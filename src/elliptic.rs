use core::f64;

/// Minimax rational approximation of K(m),
/// the complete elliptic integral of the first kind
pub fn elliptic_k(m: f64) -> f64 {
    if m > 1.0 {
        f64::NAN
    } else if m == 1.0 {
        f64::INFINITY
    } else if m > 0.592990 {
        let t = 2.45694208987494165 * m - 1.45694208987494165;
        (3703.75266375099019
            + t * (5462.47093231923466
                + t * (2744.82029097576810
                    + t * (543.839017382099411
                        + t * (36.2381612593459565 + t * 0.393188651542789784)))))
            / (2077.94377067058435
                + t * (3398.00069767755460
                    + t * (1959.05960044399275
                        + t * (472.794455487539279 + t * (43.5464368440078942 + t)))))
    } else if m > 0.350756 {
        let t = 4.12823963605439369 * m - 1.44800482178389491;
        (4264.28203103974630
            + t * (6341.90978213264024
                + t * (3214.59187442783167
                    + t * (642.790566685354573
                        + t * (43.2589626155454993 + t * 0.475223892294445943)))))
            / (2125.06914237062279
                + t * (3479.95663350926514
                    + t * (2006.03187933518870
                        + t * (482.900172581418890 + t * (44.1848041560412224 + t)))))
    } else if m > 0.206924 {
        let t = 6.95255575949719117 * m - 1.43865064797819679;
        (4870.25402224986382
            + t * (7307.18826377416591
                + t * (3738.29369283392307
                    + t * (754.928587580583704
                        + t * (51.3609902253065926 + t * 0.571948962277566451)))))
            / (2172.51745704102287
                + t * (3565.04737778032566
                    + t * (2056.13612019430497
                        + t * (493.962405117599400 + t * (44.9026847057686146 + t)))))
    } else if m > 0.121734 {
        let t = 11.7384669562155183 * m - 1.42897053644793990;
        (5514.8512729127464
            + t * (8350.4595896779631
                + t * (4313.60788246750934
                    + t * (880.27903031894216
                        + t * (60.598720224393536 + t * 0.68504458747933773)))))
            / (2218.41682813309737
                + t * (3650.41829123846319
                    + t * (2107.97379949034285
                        + t * (505.74295207655096 + t * (45.6911096775045314 + t)))))
    } else if m > 0.071412 {
        let t = 19.8720241643813839 * m - 1.41910098962680339;
        (6188.8743957372448
            + t * (9459.3331440432847
                + t * (4935.41351498551527
                    + t * (1018.21910476032105
                        + t * (70.981049144472361 + t * 0.81599895108245948)))))
            / (2260.73112539748448
                + t * (3732.66955095581621
                    + t * (2159.68721749761492
                        + t * (517.86964191812384 + t * (46.5298955058476510 + t)))))
    } else if m > 0.041770 {
        let t = 33.7359152553808785 * m - 1.40914918021725929;
        (6879.5170681289562
            + t * (10615.0836403687221
                + t * (5594.8381504799829
                    + t * (1167.26108955935542
                        + t * (82.452856129147838 + t * 0.96592719058503951)))))
            / (2296.88303450660439
                + t * (3807.37745652028212
                    + t * (2208.74949754945558
                        + t * (529.79651353072921 + t * (47.3844470709989137 + t)))))
    } else if m > 0.024360 {
        let t = 57.4382538770821367 * m - 1.39919586444572085;
        (7570.6827538712100
            + t * (11792.9392624454532
                + t * (6279.2661370014890
                    + t * (1325.01058966228180
                        + t * (94.886883830605940 + t * 1.13537029594409690)))))
            / (2324.04824540459984
                + t * (3869.56755306385732
                    + t * (2252.22250562615338
                        + t * (540.85752251676412 + t * (48.2089280211559345 + t)))))
    } else if m > 0.014165 {
        let t = 98.0872976949485042 * m - 1.38940657184894556;
        (8247.2601660137746
            + t * (12967.7060124572914
                + t * (6974.7495213178613
                    + t * (1488.54008220335966
                        + t * (108.098282908839979 + t * 1.32411616748380686)))))
            / (2340.47337508405427
                + t * (3915.63324533769906
                    + t * (2287.70677154700516
                        + t * (550.45072377717361 + t * (48.9575432570382154 + t)))))
    } else if m > 0.008213 {
        let t = 168.010752688172043 * m - 1.37987231182795699;
        (8894.2961573611293
            + t * (14113.7038749808951
                + t * (7666.5611739483371
                    + t * (1654.60731579994159
                        + t * (121.863474964652041 + t * 1.53112170837206117)))))
            / (2344.88618943372377
                + t * (3942.81065054556536
                    + t * (2313.28396270968662
                        + t * (558.07615380622169 + t * (49.5906602613891184 + t)))))
    } else if m > 0.0 {
        let t = 1.0 - 121.758188238159016 * m;
        -(m * 0.0625).ln()
            * (34813.4518336350547 + t * (235.767716637974271 + t * 0.199792723884069485))
            / (69483.5736412906324 + t * (614.265044703187382 + t))
            - m * (9382.53386835986099 + t * (51.6478985993381223 + t * 0.00410754154682816898))
                / (37327.7262507318317 + t * (408.017247271148538 + t))
    } else if m == 0.0 {
        core::f64::consts::FRAC_PI_2
    } else {
        f64::NAN
    }
}